07.链表
https://leetcode-cn.com/problems/reverse-linked-list/
206. 反转链表
反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        
        if(head==null || head.next==null){
        		return head;
        }

        ListNode cur = reverseList(head.next);
        head.next.next = head;
        head.next = null;

        return cur;

    }
}

解释 https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/

head == 1
reverseList(1)把1带进去 --> reverseList(2)---> 
reverseList(3)--->reverseList(4)--->reverseList(5)


reverseList(5)=5
此时head=4
所以

ListNode cur = 5;
4.next.next = 4  就是5.next=4;
4.next = null 断开
这时返回cur=5 所以reverseList(4)=5
然后就是reverseList(3)
3.next.next = 3
4.next = 3  
3.next = null;
依次类推 链表被反转了，返回的cur指向节点5
 5->4->3->2->1->NULL
141.环形链表
https://leetcode-cn.com/problems/linked-list-cycle/
方法一：哈希表
最容易想到的方法就是遍历所有的节点，判断这个节点是否访问过
所以我们可以使用哈希表用来存储所有已经访问过的节点，遍历所有的节点，当节点已经存在在哈希表中，证明这个链表存在环路
public class Solution {
    public boolean hasCycle(ListNode head) {
       Set(ListNode) seen = new HashSet(ListNode);
       while(head!=null){
       	  if(!seen.add(head)){
       	  	 return true;
       	  }	
       	  seen.add(head);
       }
       retrun false;

    }
}
方法二：快慢指针解法
假设有两个指针，一快一慢，如果链表存在环路，快指针一定会赶上慢指针，两个指针早晚会重合
public class Solution{
	public boolean hasCycle(ListNode head){
		if(head==null || head.next==null){
			return false;
		}
		//定义两个指针i和j，i是慢指针，j是快指针
		ListNode i = head;
		ListNode j = head.next;
		while(j!=null && j.next!=null){
			if(i==j){
				return true;
			}
			//i每次走一步，j每次走两步
			i = i.next;
			j = j.next.next;
		}
		return false;

	}

}

21.合并两个有序列表
https://leetcode-cn.com/problems/merge-two-sorted-lists/

将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
       if(l1==null){
            return l2;
        }else if(l2==null){
            return l1;
        }else if(l1.val < l2.val){
            l1.next = mergeTwoLists(l1.next,l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1,l2.next);
            return l2;
        }
}



































